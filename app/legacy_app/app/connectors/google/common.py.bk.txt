from pathlib import Path
from typing import Optional, List
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build

# This file lives at: ...\src\app\connectors\google\common.py
# We want to find credentials/token even if they were saved under different layouts.

def _candidates() -> List[Path]:
    here = Path(__file__).resolve()
    # Folders up the tree
    google_dir   = here.parent              # ...\google
    connectors   = google_dir.parent        # ...\connectors
    app_dir      = connectors.parent        # ...\app
    src_dir      = app_dir.parent           # ...\src
    project_root = src_dir.parent.parent    # ...\<root project> (two levels above src to be safe)

    # Common locations we used across packs
    return [
        # Preferred: sibling to src -> <root>\secrets\google
        project_root / "secrets" / "google",
        # Sometimes placed directly under project root
        project_root / "starter" / "PC-Termux-Replication" / "secrets" / "google",
        # Fallbacks in case someone put it under src or app
        src_dir / "secrets" / "google",
        app_dir / "secrets" / "google",
    ]

def _find(pathname: str) -> Optional[Path]:
    for base in _candidates():
        p = base / pathname
        if p.exists():
            return p
    return None

SCOPES = [
    "https://www.googleapis.com/auth/drive",     # <-- add this (write to files your app creates)
    "https://www.googleapis.com/auth/drive.metadata.readonly",
    "https://www.googleapis.com/auth/gmail.send",
    "https://www.googleapis.com/auth/gmail.modify",     # add/remove labels, mark read/unread
    "https://www.googleapis.com/auth/gmail.labels",     # create/rename/delete labels
    "https://www.googleapis.com/auth/gmail.readonly",
    "https://www.googleapis.com/auth/userinfo.email",
    "openid",
]


def load_credentials() -> Credentials:
    token_path = _find("token.json")
    creds_path = _find("credentials.json")

    if token_path is None:
        # Give the clearest preferred path in the error
        preferred = (_candidates()[0] / "token.json")
        raise RuntimeError(
            f"Google token not found. Expected at one of: "
            f"{', '.join(str((c / 'token.json')) for c in _candidates())}.\n"
            f"If you already ran auth, move your token to: {preferred}"
        )
    if creds_path is None:
        preferred = (_candidates()[0] / "credentials.json")
        raise RuntimeError(
            f"Google credentials.json not found. Expected at one of: "
            f"{', '.join(str((c / 'credentials.json')) for c in _candidates())}.\n"
            f"Place your client JSON at: {preferred}"
        )

    creds = Credentials.from_authorized_user_file(str(token_path))
    return creds

def get_drive_service():
    creds = load_credentials()
    return build("drive", "v3", credentials=creds, cache_discovery=False)

def get_gmail_service():
    creds = load_credentials()
    return build("gmail", "v1", credentials=creds, cache_discovery=False)
